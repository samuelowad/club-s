// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "image.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ImageRequest
 */
export interface ImageRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
}
/**
 * @generated from protobuf message ImageResponse
 */
export interface ImageResponse {
    /**
     * @generated from protobuf field: bool explicit = 1;
     */
    explicit: boolean;
    /**
     * @generated from protobuf field: string imageText = 2;
     */
    imageText: string;
    /**
     * @generated from protobuf field: int32 id = 3;
     */
    id: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ImageRequest$Type extends MessageType<ImageRequest> {
    constructor() {
        super("ImageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageRequest>): ImageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<ImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageRequest): ImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageRequest
 */
export const ImageRequest = new ImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageResponse$Type extends MessageType<ImageResponse> {
    constructor() {
        super("ImageResponse", [
            { no: 1, name: "explicit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "imageText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ImageResponse>): ImageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.explicit = false;
        message.imageText = "";
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<ImageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageResponse): ImageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool explicit */ 1:
                    message.explicit = reader.bool();
                    break;
                case /* string imageText */ 2:
                    message.imageText = reader.string();
                    break;
                case /* int32 id */ 3:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool explicit = 1; */
        if (message.explicit !== false)
            writer.tag(1, WireType.Varint).bool(message.explicit);
        /* string imageText = 2; */
        if (message.imageText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageText);
        /* int32 id = 3; */
        if (message.id !== 0)
            writer.tag(3, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageResponse
 */
export const ImageResponse = new ImageResponse$Type();
/**
 * @generated ServiceType for protobuf service ImageService
 */
export const ImageService = new ServiceType("ImageService", [
    { name: "ProcessImage", options: {}, I: ImageRequest, O: ImageResponse }
]);
